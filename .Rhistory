install.packages("Hmisc")
library(Hmisc)
source("~/GitHub/auctions/gen_data.R", echo=TRUE)
data.frame(population = row.names(u), as.data.frame(u), row.names = NULL)
data.frame(population = row.names(u), as.data.frame(u))
as.data.frame(u)
?as.data.frame
histogram(as.data.frame(u)[1])
as.data.frame(u)[1]
u[1]
u[1,1]
u[1,2]
u[2,1]
matrix(replicate(N,mu),nrow=N)
t(matrix(replicate(N,mu),nrow=N))
source("~/GitHub/auctions/gen_data.R", echo=TRUE)
source("~/GitHub/auctions/gen_data.R", echo=TRUE)
hist(u(1:N))
hist(u[1:N])
u[1:N]
u[2*N+1:3N]
u[2*N+1:3*N]
hist(u[1:N])
hist(u[1*N+1:1*N+N])
u[1*N+1:1*N+N]
[1*N+1:1*N+N]
1*N+1:1*N+N
u[21:30]
u[21:30]
hist(u[21:30])
hist(u[61:70])
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
?source
source(gen-data.R)
source('gen-data.R')
source('gen-data.R')
N <- 100
source('gen-data.R')
N <- 100
source('gen-data.R')
N <- 100
sigma <- .5
delta <- .5
source('gen-data.R')
rejected <- 0*matrix(1:N^2, nrow=N,ncol=N)
as.logical(rejected)
max.col(u)
N <- 10
sigma <- .5
delta <- .5
source('gen-data.R')
N <- 10
max.col(u)
View(u)
N <- 10
sigma <- .75
delta <- .75
source('gen-data.R')
rejected <- as.logical(0*matrix(1:N^2, nrow=N,ncol=N))
proposals <- max.col(u)
proposals
View(v)
match(6,proposals)
n==proposals
6==proposals
(6==proposals)*v[6]
v[6]
?rbind
'Man' + 1:N
'Man' & 1:N
paste("Man",1:N)
N <- 10
sigma <- .5
delta <- .5
source('gen-data.R')
source("~/GitHub/auctions/gen-data.R", echo=TRUE)
source("~/GitHub/auctions/gen-data.R", echo=TRUE)
View(u_bach)
source("~/GitHub/auctions/gen-data.R", echo=TRUE)
N <- 10
sigma <- .5
delta <- .5
source('gen-data.R')
View(v_bach)
for (n in 1:N){
(n==proposals)*v['Woman n']
}
View(v)
(6==proposals)*v['Woman 6']
v['Woman 6']
v[''Woman 6'']
v["Woman 6"]
v
v['Woman 6',]
v['Woman n',]
v['Woman 6',]
(6==proposals)v['Woman 6',]
(6==proposals)*v['Woman 6',]
max.col((n==proposals)*v[paste("Woman",n),])
(n==proposals)*v[paste("Woman",n),]
paste("Woman",n)
max.col((6==proposals)*v[paste("Woman",6),])
paste("Woman",6)
v[paste("Woman",6),]
((6==proposals)*v[paste("Woman",6),])
?max.col
max.row((6==proposals)*v[paste("Woman",6),])
max((6==proposals)*v[paste("Woman",6),])
for (n in 1:N){
if (sum(n==proposals)>0) {v[paste("Woman",n),]==max((n==proposals)*v[paste("Woman",n),])}
}
v[paste("Woman",n),]==max((n==proposals)*v[paste("Woman",n),]
v[paste("Woman",6),]==max((6==proposals)*v[paste("Woman",6),]
N <- 10
N <- 10
sigma <- .5
delta <- .5
source('gen-data.R')
max((6==proposals)*v[paste("Woman",6),]
)
View(v)
v[paste("Woman",n),]==max((n==proposals)*v[paste("Woman",n),])
v[paste("Woman",6),]==max((6==proposals)*v[paste("Woman",6),])
n<-6
for (n in 1:N){
if (sum(n==proposals)>0) { #if woman n has proposal(s)
if (max((n==proposals)*v[paste("Woman",n),])>v_bach[paste("Woman",n)]) {
#if best proposal better than staying single, don't reject it (but reject proposals
# below the best one
(n==proposals)*v[paste("Woman",n),]<max((n==proposals)*v[paste("Woman",n),])
}}
}
(n==proposals)*v[paste("Woman",n),]<max((n==proposals)*v[paste("Woman",n),])
rejected[6,]
rejected <- matrix(as.logical(0*1:N^2), nrow=N,ncol=N)
proposals <- max.col(u)
rejected
rejected <- matrix(as.logical(0*1:N^2), nrow=N,ncol=N) #row is woman who rejects
# man(column)
rownames(rejected) <- paste("Woman",1:N)
colnames(rejected) <- paste("Man",1:N)
proposals <- max.col(u)
pseudo_u <- u
for (n in 1:N){
if (sum(n==proposals)>0) { #if woman n has proposal(s)
if (max((n==proposals)*v[paste("Woman",n),])>v_bach[paste("Woman",n)]) {
#if best proposal better than staying single, don't reject it (but reject proposals
# below the best one
rejected[n,] <- (n==proposals)*v[paste("Woman",n),]<max((n==proposals)*v[paste("Woman",n),])
}}
}
v_bach[paste("Woman",n)]
View(v_bach)
v_bach[paste("Woman",4)]
v_bach[paste("Woman",1)]
v_bach[n]
max((n==proposals)*v[paste("Woman",n),])>v_bach[n]
v[paste("Woman",n),]
(n==proposals)*v[paste("Woman",n),]
max((n==proposals)*v[paste("Woman",n),])
(max((n==proposals)*v[paste("Woman",n),])>v_bach[n])
(n==proposals)*v[paste("Woman",n),]
max((n==proposals)*v[paste("Woman",n),])
(n==proposals)*v[paste("Woman",n),]
(n==proposals)*v[paste("Woman",n),]<max((n==proposals)*v[paste("Woman",n),])
v[paste("Woman",n),]
(n==proposals)*v[paste("Woman",n),]<max((n==proposals)*v[paste("Woman",n),])
(n==proposals)*v[paste("Woman",n),]<max((n==proposals)*v[paste("Woman",n),]) & (n==proposals)
for (n in 1:N){
if (sum(n==proposals)>0) { #if woman n has proposal(s)
if (max((n==proposals)*v[paste("Woman",n),])>v_bach[n]) {
#if best proposal better than staying single, don't reject it (but reject proposals
# below the best one
rejected[n,] <- (n==proposals)*v[paste("Woman",n),]<max((n==proposals)*v[paste("Woman",n),]) & (n==proposals)
}}
}
View(rejected)
?while
?while
?while
??while
?loop
??loop
rejected <- matrix(as.logical(0*1:N^2), nrow=N,ncol=N) #row is woman who rejects
# man(column)
rownames(rejected) <- paste("Woman",1:N)
colnames(rejected) <- paste("Man",1:N)
rejected_past <- rejected
proposals <- max.col(u)
pseudo_u <- u
while (rejected_past != rejected) {
for (n in 1:N){
if (sum(n==proposals)>0) { #if woman n has proposal(s)
if (max((n==proposals)*v[paste("Woman",n),])>v_bach[n]) {
#if best proposal better than staying single, don't reject it (but reject proposals
# below the best one
rejected[n,] <- (n==proposals)*v[paste("Woman",n),]<max((n==proposals)*v[paste("Woman",n),]) & (n==proposals)
}}}
rounds <- rounds + 1
}
sum(rejected_past != rejected)
knitr::opts_chunk$set(echo = TRUE)
N <- 10
sigma <- .5
delta <- .5
source('gen-data.R')
rejected <- matrix(as.logical(0*1:N^2), nrow=N,ncol=N) #row is woman who rejects
# man(column)
rownames(rejected) <- paste("Woman",1:N)
colnames(rejected) <- paste("Man",1:N)
rejected_past <- rejected
proposals <- max.col(u)
pseudo_u <- u
rounds <- 1
for (n in 1:N){
if (sum(n==proposals)>0) { #if woman n has proposal(s)
if (max((n==proposals)*v[paste("Woman",n),])>v_bach[n]) {
#if best proposal better than staying single, don't reject it (but reject proposals
# below the best one
rejected[n,] <- (n==proposals)*v[paste("Woman",n),]<max((n==proposals)*v[paste("Woman",n),]) & (n==proposals)
}}}
while (sum(rejected_past != rejected)) {
for (n in 1:N){
if (sum(n==proposals)>0) { #if woman n has proposal(s)
if (max((n==proposals)*v[paste("Woman",n),])>v_bach[n]) {
#if best proposal better than staying single, don't reject it (but reject proposals
# below the best one
rejected[n,] <- (n==proposals)*v[paste("Woman",n),]<max((n==proposals)*v[paste("Woman",n),]) & (n==proposals)
}}}
rounds <- rounds + 1
}
N <- 10
sigma <- .5
delta <- .5
source('gen-data.R')
rejected <- matrix(as.logical(0*1:N^2), nrow=N,ncol=N) #row is woman who rejects
# man(column)
rownames(rejected) <- paste("Woman",1:N)
colnames(rejected) <- paste("Man",1:N)
rejected_past <- rejected
proposals <- max.col(u)
pseudo_u <- u
rounds <- 1
for (n in 1:N){
if (sum(n==proposals)>0) { #if woman n has proposal(s)
if (max((n==proposals)*v[paste("Woman",n),])>v_bach[n]) {
#if best proposal better than staying single, don't reject it (but reject proposals
# below the best one
rejected[n,] <- rejected[n,] + (n==proposals)*v[paste("Woman",n),]<max((n==proposals)*v[paste("Woman",n),]) & (n==proposals)
}}}
rejected
rejected_past
rejected <- matrix(as.logical(0*1:N^2), nrow=N,ncol=N) #row is woman who rejects
# man(column)
rownames(rejected) <- paste("Woman",1:N)
colnames(rejected) <- paste("Man",1:N)
rejected_past <- rejected
rejected_by <- t(rejected)
rownames(rejected_by) <- paste("Man",1:N)
colnames(rejected_by) <- paste("Woman",1:N)
proposals <- max.col(u)
pseudo_u <- u
rounds <- 1
for (n in 1:N){
if (sum(n==proposals)>0) { #if woman n has proposal(s)
if (max((n==proposals)*v[paste("Woman",n),])>v_bach[n]) {
#if best proposal better than staying single, don't reject it (but reject proposals
# below the best one
rejected[n,] <- rejected[n,] + (n==proposals)*v[paste("Woman",n),]<max((n==proposals)*v[paste("Woman",n),]) & (n==proposals)
}}}
rejected_by <- t(rejected)
rownames(rejected_by) <- paste("Man",1:N)
colnames(rejected_by) <- paste("Woman",1:N)
for (n in 1:N){
if (sum(n==proposals)>0) { #if woman n has proposal(s)
if (max((n==proposals)*v[paste("Woman",n),])>v_bach[n]) {
#if best proposal better than staying single, don't reject it (but reject proposals
# below the best one
rejected[n,] <- rejected[n,] + (n==proposals)*v[paste("Woman",n),]<max((n==proposals)*v[paste("Woman",n),]) & (n==proposals)
}}}
rejected_by <- t(rejected)
View(rejected_by)
for (n in 1:N){
if (sum(n==proposals)>0) { #if woman n has proposal(s)
if (max((n==proposals)*v[paste("Woman",n),])>v_bach[n]) {
#if best proposal better than staying single, don't reject it (but reject proposals
# below the best one
rejected[n,] <- rejected[n,] + (n==proposals)*v[paste("Woman",n),]<max((n==proposals)*v[paste("Woman",n),]) & (n==proposals)
}}}
rejected_by <- t(rejected)
new_rejections = sum(rejected)-sum(rejected_past)
pseudo_u <- u*(1-rejected_by)+(-10^6)*rejected_by
View(pseudo_u)
rejected <- matrix(as.logical(0*1:N^2), nrow=N,ncol=N) #row is woman who rejects
# man(column)
rownames(rejected) <- paste("Woman",1:N)
colnames(rejected) <- paste("Man",1:N)
rejected_past <- rejected
rejected_by <- t(rejected)
rownames(rejected_by) <- paste("Man",1:N)
colnames(rejected_by) <- paste("Woman",1:N)
proposals <- max.col(u)
pseudo_u <- u
rounds <- 1
for (n in 1:N){
if (sum(n==proposals)>0) { #if woman n has proposal(s)
if (max((n==proposals)*v[paste("Woman",n),])>v_bach[n]) {
#if best proposal better than staying single, don't reject it (but reject proposals
# below the best one
rejected[n,] <- rejected[n,] + (n==proposals)*v[paste("Woman",n),]<max((n==proposals)*v[paste("Woman",n),]) & (n==proposals) # adds new rejections to previous ones
}
else rejected[n,] <- rejected[n,] + (n==proposals)*v[paste("Woman",n),]}}
rejected_by <- t(rejected)
new_rejections = sum(rejected)-sum(rejected_past)
rejected <- matrix(as.logical(0*1:N^2), nrow=N,ncol=N) #row is woman who rejects
# man(column)
rownames(rejected) <- paste("Woman",1:N)
colnames(rejected) <- paste("Man",1:N)
rejected_past <- rejected
rejected_by <- t(rejected)
rownames(rejected_by) <- paste("Man",1:N)
colnames(rejected_by) <- paste("Woman",1:N)
proposals <- max.col(u)
pseudo_u <- u
rounds <- 1
for (n in 1:N){
if (sum(n==proposals)>0) { #if woman n has proposal(s)
if (max((n==proposals)*v[paste("Woman",n),])>v_bach[n]) {
#if best proposal better than staying single, don't reject it (but reject proposals
# below the best one
rejected[n,] <- rejected[n,] + (n==proposals)*v[paste("Woman",n),]<max((n==proposals)*v[paste("Woman",n),]) & (n==proposals) # adds new rejections to previous ones
}
else rejected[n,] <- rejected[n,] + (n==proposals)}}
rejected_by <- t(rejected)
new_rejections = sum(rejected)-sum(rejected_past)
while (new_rejections>0 & rounds<200) {
pseudo_u <- u*(1-rejected_by)+(-10^6)*rejected_by #to force men never to
#propose to a woman twice
proposals <- max.col(pseudo_u)
for (n in 1:N){
if (sum(n==proposals)>0) { #if woman n has proposal(s)
if (max((n==proposals)*v[paste("Woman",n),])>v_bach[n]) {
#if best proposal better than staying single, don't reject it (but reject proposals
# below the best one
rejected[n,] <- rejected[n,] + (n==proposals)*v[paste("Woman",n),]<max((n==proposals)*v[paste("Woman",n),]) & (n==proposals) # adds new rejections to previous ones
}
else rejected[n,] <- rejected[n,] + (n==proposals)}} # if no proposal tops being single, reject all
rejected_by <- t(rejected)
new_rejections = sum(rejected)-sum(rejected_past)
rounds <- rounds + 1
}
knitr::opts_chunk$set(echo = TRUE)
N <- 10
sigma <- .5
delta <- .5
source('gen-data.R')
rejected <- matrix(as.logical(0*1:N^2), nrow=N,ncol=N) #row is woman who rejects
# man(column)
rownames(rejected) <- paste("Woman",1:N)
colnames(rejected) <- paste("Man",1:N)
rejected_past <- rejected
rejected_by <- t(rejected)
rownames(rejected_by) <- paste("Man",1:N)
colnames(rejected_by) <- paste("Woman",1:N)
proposals <- max.col(u)
pseudo_u <- u
rounds <- 1
for (n in 1:N){
if (sum(n==proposals)>0) { #if woman n has proposal(s)
if (max((n==proposals)*v[paste("Woman",n),])>v_bach[n]) {
#if best proposal better than staying single, don't reject it (but reject proposals
# below the best one
rejected[n,] <- rejected[n,] + (n==proposals)*v[paste("Woman",n),]<max((n==proposals)*v[paste("Woman",n),]) & (n==proposals) # adds new rejections to previous ones
}
else rejected[n,] <- rejected[n,] + (n==proposals)}} # if no proposal tops being single, reject all
rejected_by <- t(rejected)
new_rejections = sum(rejected)-sum(rejected_past)
while (new_rejections>0 & rounds<2000) {
pseudo_u <- u*(1-rejected_by)+(-10^6)*rejected_by #to force men never to
#propose to a woman twice
proposals <- max.col(pseudo_u)
for (n in 1:N){
if (sum(n==proposals)>0) { #if woman n has proposal(s)
if (max((n==proposals)*v[paste("Woman",n),])>v_bach[n]) {
#if best proposal better than staying single, don't reject it (but reject proposals
# below the best one
rejected[n,] <- rejected[n,] + (n==proposals)*v[paste("Woman",n),]<max((n==proposals)*v[paste("Woman",n),]) & (n==proposals) # adds new rejections to previous ones
}
else rejected[n,] <- rejected[n,] + (n==proposals)}} # if no proposal tops being single, reject all
rejected_by <- t(rejected)
new_rejections = sum(rejected)-sum(rejected_past)
rounds <- rounds + 1
}
View(u)
(n==proposals)
N <- 3
sigma <- .5
delta <- .5
source('gen-data.R')
for (n in 1:N){
if (sum(n==proposals)>0) { #if woman n has proposal(s)
if (max((n==proposals)*v[paste("Woman",n),])>v_bach[n]) {
#if best proposal better than staying single, don't reject it (but reject proposals
# below the best one
rejected[n,] <- rejected[n,] + (n==proposals)*v[paste("Woman",n),]<max((n==proposals)*v[paste("Woman",n),]) & (n==proposals) # adds new rejections to previous ones
}
else rejected[n,] <- rejected[n,] + (n==proposals)}} # if no proposal tops being single, reject all
rejected_by <- t(rejected)
new_rejections = sum(rejected)-sum(rejected_past)
rejected <- matrix(as.logical(0*1:N^2), nrow=N,ncol=N) #row is woman who rejects
# man(column)
rownames(rejected) <- paste("Woman",1:N)
colnames(rejected) <- paste("Man",1:N)
rejected_past <- rejected
rejected_by <- t(rejected)
rownames(rejected_by) <- paste("Man",1:N)
colnames(rejected_by) <- paste("Woman",1:N)
proposals <- max.col(u)
pseudo_u <- u
rounds <- 1
for (n in 1:N){
if (sum(n==proposals)>0) { #if woman n has proposal(s)
if (max((n==proposals)*v[paste("Woman",n),])>v_bach[n]) {
#if best proposal better than staying single, don't reject it (but reject proposals
# below the best one
rejected[n,] <- rejected[n,] + (n==proposals)*v[paste("Woman",n),]<max((n==proposals)*v[paste("Woman",n),]) & (n==proposals) # adds new rejections to previous ones
}
else rejected[n,] <- rejected[n,] + (n==proposals)}} # if no proposal tops being single, reject all
rejected_by <- t(rejected)
new_rejections = sum(rejected)-sum(rejected_past)
while (new_rejections>0 & rounds<2000) {
pseudo_u <- u*(1-rejected_by)+(-10^6)*rejected_by #to force men never to
#propose to a woman twice
proposals <- max.col(pseudo_u)
for (n in 1:N){
if (sum(n==proposals)>0) { #if woman n has proposal(s)
if (max((n==proposals)*v[paste("Woman",n),])>v_bach[n]) {
#if best proposal better than staying single, don't reject it (but reject proposals
# below the best one
rejected[n,] <- rejected[n,] + (n==proposals)*v[paste("Woman",n),]<max((n==proposals)*v[paste("Woman",n),]) & (n==proposals) # adds new rejections to previous ones
}
else rejected[n,] <- rejected[n,] + (n==proposals)}} # if no proposal tops being single, reject all
rejected_by <- t(rejected)
new_rejections = sum(rejected)-sum(rejected_past)
rounds <- rounds + 1
}
while (new_rejections>0 & rounds<20000) {
pseudo_u <- u*(1-rejected_by)+(-10^6)*rejected_by #to force men never to
#propose to a woman twice
proposals <- max.col(pseudo_u)
for (n in 1:N){
if (sum(n==proposals)>0) { #if woman n has proposal(s)
if (max((n==proposals)*v[paste("Woman",n),])>v_bach[n]) {
#if best proposal better than staying single, don't reject it (but reject proposals
# below the best one
rejected[n,] <- rejected[n,] + (n==proposals)*v[paste("Woman",n),]<max((n==proposals)*v[paste("Woman",n),]) & (n==proposals) # adds new rejections to previous ones
}
else rejected[n,] <- rejected[n,] + (n==proposals)}} # if no proposal tops being single, reject all
rejected_by <- t(rejected)
new_rejections = sum(rejected)-sum(rejected_past)
rounds <- rounds + 1
}
knitr::opts_chunk$set(echo = TRUE)
N <- 3
sigma <- .5
delta <- .5
source('gen-data.R')
rejected <- matrix(as.logical(0*1:N^2), nrow=N,ncol=N) #row is woman who rejects
# man(column)
rownames(rejected) <- paste("Woman",1:N)
colnames(rejected) <- paste("Man",1:N)
rejected_past <- rejected
rejected_by <- t(rejected)
rownames(rejected_by) <- paste("Man",1:N)
colnames(rejected_by) <- paste("Woman",1:N)
proposals <- max.col(u)
pseudo_u <- u
rounds <- 1
for (n in 1:N){
if (sum(n==proposals)>0) { #if woman n has proposal(s)
if (max((n==proposals)*v[paste("Woman",n),])>v_bach[n]) {
#if best proposal better than staying single, don't reject it (but reject proposals
# below the best one
rejected[n,] <- rejected[n,] + (n==proposals)*v[paste("Woman",n),]<max((n==proposals)*v[paste("Woman",n),]) & (n==proposals) # adds new rejections to previous ones
}
else rejected[n,] <- rejected[n,] + (n==proposals)}} # if no proposal tops being single, reject all
rejected_by <- t(rejected)
new_rejections = sum(rejected)-sum(rejected_past)
while (new_rejections>0 & rounds<20000) {
rejected_past <- rejected
pseudo_u <- u*(1-rejected_by)+(-10^6)*rejected_by #to force men never to
#propose to a woman twice
proposals <- max.col(pseudo_u)
for (n in 1:N){
if (sum(n==proposals)>0) { #if woman n has proposal(s)
if (max((n==proposals)*v[paste("Woman",n),])>v_bach[n]) {
#if best proposal better than staying single, don't reject it (but reject proposals
# below the best one
rejected[n,] <- rejected[n,] + (n==proposals)*v[paste("Woman",n),]<max((n==proposals)*v[paste("Woman",n),]) & (n==proposals) # adds new rejections to previous ones
}
else rejected[n,] <- rejected[n,] + (n==proposals)}} # if no proposal tops being single, reject all
rejected_by <- t(rejected)
new_rejections <- sum(rejected)-sum(rejected_past)
rounds <- rounds + 1
}
*(max(pseudo_u)>=u_bach)
(max(pseudo_u)>=u_bach)
u
max(u)
max.col(u)
u[max.col(u)]
